//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : ControladorUsuario.java
//  @ Date : 09/05/2024
//  @ Author :
//
//

package org.example.controlador;

import org.example.modelo.Cuidador;
import org.example.modelo.Dueno;
import org.example.modelo.EnumProveedor;
import org.example.modelo.Usuario;
import org.example.persistencia.IPersistenciaUsuario;
import org.example.persistencia.PersistenciaUsuario;
import org.example.vista.IVistaUsuario;
import org.example.vista.VistaUsuario;
import servidor.ExternalRRSS;

import java.io.IOException;
import java.util.List;


public class ControladorUsuario extends Controlador implements IAccesoUsuarios {
    private IPersistenciaUsuario iPersistenciaUsuario;
    private List<Usuario> listaUsuarios;
    private IVistaUsuario vistaUsuario;

    public ControladorUsuario() throws IOException {
        super();
        iPersistenciaUsuario = new PersistenciaUsuario("csv/usuarios.csv");
        listaUsuarios = cargarUsuarios();
        vistaUsuario = new VistaUsuario();
    }

    // Métodos de LOGIN y REGISTRO de usuarios.
    public Usuario login() throws IOException {
        vistaUsuario.seleccionarRol();
        String rol = interfazSistema.entradaString().trim().toUpperCase();

        EnumProveedor proveedor = seleccionarProveedor();
        String id = ExternalRRSS.LoginRRSS();
        Usuario usuario = getUsuarioRol(id, rol);

        if (usuario != null) {
            usuario.setProveedor(proveedor);
            vistaUsuario.usuarioLogeado();
            return usuario;
        }

        vistaUsuario.seleccionarNombre();
        String nombre = interfazSistema.entradaString();

        usuario = crearUsuario(id, nombre, proveedor, rol);
        registro(usuario);

        return usuario;
    }

    private void registro(Usuario usuario) throws IOException {
        if (usuario.getClass().getSimpleName().equals("Cuidador")) {
            Cuidador cuidador = (Cuidador) usuario;

            vistaUsuario.seleccionarDescripcion();
            cuidador.setDescripcion(interfazSistema.entradaString());

            try {
                vistaUsuario.seleccionarTarifa();
                cuidador.setTarifa(Double.parseDouble(interfazSistema.entradaString()));
            } catch (NumberFormatException e) {
                throw new NumberFormatException("Introduzca un valor de coste válido.");
            }
        }

        iPersistenciaUsuario.guardar(usuario);
        listaUsuarios.add(usuario);

        vistaUsuario.usuarioCreado();
    }

    private Usuario crearUsuario(String id, String nombre, EnumProveedor proveedor, String rol) throws IllegalArgumentException {
        if (rol.equalsIgnoreCase("dueño")) {
            return new Dueno(id, nombre, proveedor);
        } else if (rol.equalsIgnoreCase("cuidador")) {
            return new Cuidador(id, nombre, proveedor, null, null);
        } else throw new IllegalArgumentException("Rol no existente (" + rol + ")");
    }

    private EnumProveedor seleccionarProveedor() {
        try {
            vistaUsuario.seleccionarProveedor();
            return EnumProveedor.valueOf(interfazSistema.entradaString().trim().toUpperCase());
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Proveedor no existente.", e);
        }
    }

    // Métodos auxiliares.
    private Usuario getUsuarioRol(String id, String rol) {
        if (rol.equalsIgnoreCase("dueño")) {
            return getDuenoId(id);
        } else if (rol.equalsIgnoreCase("cuidador")) {
            return getCuidadorId(id);
        } else return null;
    }

    public Dueno getDuenoId(String id) {
        for (Usuario u : listaUsuarios) {
            if (u instanceof Dueno && id.equals(u.getId())) return (Dueno) u;
        }
        return null;
    }

    public Cuidador getCuidadorId(String id) {
        for (Usuario u : listaUsuarios) {
            if (u instanceof Cuidador && id.equals(u.getId())) return (Cuidador) u;
        }
        return null;
    }

    // Gestión de lista de usuarios.
    private List<Usuario> cargarUsuarios() throws IOException {
        return iPersistenciaUsuario.cargar();
    }
}