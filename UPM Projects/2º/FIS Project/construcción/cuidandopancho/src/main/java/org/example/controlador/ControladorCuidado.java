//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : ControladorCuidado.java
//  @ Date : 09/05/2024
//  @ Author : 
//
//

package org.example.controlador;

import org.example.modelo.Cuidado;
import org.example.modelo.Cuidador;
import org.example.modelo.Dueno;
import org.example.modelo.Mascota;
import org.example.persistencia.IPersistenciaCuidado;
import org.example.persistencia.PersistenciaCuidado;
import org.example.vista.IVistaCuidado;
import org.example.vista.VistaCuidado;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class ControladorCuidado extends Controlador {
    private IPersistenciaCuidado iPersistenciaCuidado;
    private List<Cuidado> listaCuidados;
    private IVistaCuidado vistaCuidado;

    public ControladorCuidado(IAccesoUsuarios accesoUsuarios, IAccesoMascotas accesoMascotas) throws IOException {
        super();
        iPersistenciaCuidado = new PersistenciaCuidado("csv/cuidados.csv");
        listaCuidados = cargarCuidados(accesoUsuarios, accesoMascotas);
        vistaCuidado = new VistaCuidado();
    }

    // Métodos de REGISTRO de PETICIONES de CUIDADOS.
    private void registrarCuidado(Cuidado cuidado) throws IOException, ParseException {
        if (cuidado.getFechaInicio() == null && cuidado.getFechaFin() == null) {
            vistaCuidado.solicitarFechaInicio();
            cuidado.setFechaInicio(interfazSistema.entradaString());

            vistaCuidado.solicitarFechaFin();
            cuidado.setFechaFin(interfazSistema.entradaString());

            if (!fechasValidas(cuidado.getFechaInicio(), cuidado.getFechaFin()))
                throw new IllegalArgumentException("La fecha de fin debe ser posterior a la fecha de inicio del cuidado, y a partir del 2024.");
        }

        iPersistenciaCuidado.guardar(cuidado);
        if (!listaCuidados.contains(cuidado)) listaCuidados.add(cuidado);
    }

    private void borrarCuidado(Cuidado cuidado) throws IOException {
        if (!cuidado.cuidadoLibre()) cuidado.getCuidador().delCuidado(cuidado);
        iPersistenciaCuidado.borrar(cuidado.getMascota().getRiac());
    }

    public void altaPeticionCuidado() throws IOException, ParseException {
        Dueno dueno = (Dueno) interfazSistema.getUsuarioLogeado();
        List<Mascota> mascotas = dueno.getListaMascotas();

        if (mascotas.isEmpty()) {
            throw new NullPointerException("No dispones de ninguna mascota a la que cuidar.");
        }

        Mascota mascota;
        try {
            vistaCuidado.seleccionarMascota(mascotas);
            mascota = mascotas.get(Integer.parseInt(interfazSistema.entradaString()) - 1);
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new ArrayIndexOutOfBoundsException("Indique una mascota válida.");
        } catch (NumberFormatException e) {
            throw new NumberFormatException("Indique una mascota válida.");
        }

        if (existeCuidadoMascota(mascota.getRiac())) {
            throw new IllegalStateException("La mascota seleccionada ya tiene un cuidado asignado.");
        }

        vistaCuidado.solicitarPanchopuntos();
        int panchopuntos = Integer.parseInt(interfazSistema.entradaString());

        registrarCuidado(new Cuidado(panchopuntos, mascota));
        vistaCuidado.cuidadoCreado();
    }

    public void asignarCuidado(Cuidado cuidado, Cuidador cuidador) throws ParseException, IOException {
        String idDueno = cuidado.getMascota().getDueno().getId();

        if (!duenoCuidadorValido(idDueno, cuidador.getId())) {
            throw new IllegalStateException("No puedes cuidar a tu propia mascota.");
        }

        cuidado.setCuidador(cuidador);
        cuidado.setCoste(cuidador.getTarifa());
        cuidador.addPanchopuntos(cuidado.getPanchopuntos());

        borrarCuidado(cuidado);
        registrarCuidado(cuidado);
        cuidador.addCuidado(cuidado);

        vistaCuidado.cuidadoAsignado();
    }

    // Métodos auxiliares.
    private boolean existeCuidadoMascota(String riac) {
        for (Cuidado c : listaCuidados) {
            if (riac.equals(c.getMascota().getRiac())) return true;
        }
        return false;
    }

    private boolean fechasValidas(String fechaInicio, String fechaFin) throws ParseException {

        // Se consideran válidas cualquier fecha a partir del 01-01-2024.
        SimpleDateFormat simpleDate = new SimpleDateFormat("dd-MM-yyyy");
        Date fechaValida = simpleDate.parse("31-12-2023");
        Date inicio = simpleDate.parse(fechaInicio);
        Date fin = simpleDate.parse(fechaFin);

        return inicio.before(fin) && inicio.after(fechaValida);
    }

    private boolean duenoCuidadorValido(String idDueno, String idCuidador) {

        // Se comprueba si un dueño tiene intención de cuidar a su propia mascota.
        return !idDueno.equals(idCuidador);
    }

    // Gestión de lista de cuidados.
    public List<Cuidado> getCuidadosLibres() {
        List<Cuidado> cuidadosLibres = new ArrayList<>();

        for (Cuidado c : listaCuidados)
            if (c.cuidadoLibre()) cuidadosLibres.add(c);

        return cuidadosLibres;
    }

    private List<Cuidado> cargarCuidados(IAccesoUsuarios accesoUsuarios, IAccesoMascotas accesoMascotas) throws IOException {
        return iPersistenciaCuidado.cargar(accesoUsuarios, accesoMascotas);
    }
}