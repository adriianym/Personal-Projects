//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : ControladorMascota.java
//  @ Date : 09/05/2024
//  @ Author :
//
//

package org.example.controlador;

import org.example.modelo.Dueno;
import org.example.modelo.Mascota;
import org.example.modelo.MascotaExotica;
import org.example.persistencia.IPersistenciaMascota;
import org.example.persistencia.PersistenciaMascota;
import org.example.vista.IVistaMascota;
import org.example.vista.VistaMascota;

import java.io.IOException;
import java.util.List;

public class ControladorMascota extends Controlador implements IAccesoMascotas {
    private IPersistenciaMascota iPersistenciaMascota;
    private List<Mascota> listaMascota;
    private IVistaMascota vistaMascota;

    public ControladorMascota(IAccesoUsuarios accesoUsuarios) throws IOException {
        super();
        iPersistenciaMascota = new PersistenciaMascota("csv/mascotas.csv");
        listaMascota = cargarMascotas(accesoUsuarios);
        vistaMascota = new VistaMascota();
    }

    // Métodos de REGISTRO de mascotas.
    public void altaMascota() throws IOException {
        String[] datos = solicitarDatosMascota();

        if (datos != null) {
            Mascota mascota = new Mascota(datos[0], Integer.parseInt(datos[1]), datos[2], datos[3], datos[4], (Dueno) interfazSistema.getUsuarioLogeado());
            registrarMascota(mascota);
        }
    }

    public void altaMascotaExotica() throws IOException {
        String[] datos = solicitarDatosMascota();

        if (datos != null) {
            MascotaExotica mascota = new MascotaExotica(datos[0], Integer.parseInt(datos[1]), datos[2], datos[3], datos[4], (Dueno) interfazSistema.getUsuarioLogeado(), null);
            registrarMascota(mascota);
        }
    }

    private String[] solicitarDatosMascota() {
        vistaMascota.solicitarDatosMascota();
        String[] datos = interfazSistema.entradaString().trim().split(",");

        if (datos.length != 5) throw new IllegalArgumentException("El número de datos es inválido.");

        if (comprobarRiacPoliza(datos[0], Integer.parseInt(datos[1]))) {
            return datos;
        }

        return null;
    }

    private void registrarMascota(Mascota mascota) throws IOException {
        iPersistenciaMascota.guardar(mascota);
        listaMascota.add(mascota);

        if (mascota instanceof MascotaExotica) {
            vistaMascota.mascotaExoticaRegistrada();
        } else vistaMascota.mascotaRegistrada();
    }

    // Métodos auxiliares.
    private boolean comprobarRiacPoliza(String riac, int poliza) {

        // Se comprueban las entradas de los datos.
        if (riac == null || riac.trim().isEmpty()) throw new IllegalArgumentException("El RIAC no puede ser nulo.");

        if (poliza <= 0) throw new IllegalArgumentException("El número de póliza debe ser positivo.");

        // Se comprueba que el RIAC sea válido.
        if (!servidor.ExternalRIAC.RIAC(riac)) {
            throw new IllegalArgumentException("El RIAC dado es incorrecto.");
        }

        // Se comprueba que tanto el RIAC como la póliza no se encuentran repetidos.
        if (getMascotaRiac(riac) != null) throw new IllegalArgumentException("El RIAC se encuentra repetido.");

        if (getMascotaPoliza(poliza) != null)
            throw new IllegalArgumentException("El número de póliza se encuentra repetido.");

        return true;
    }

    // Gestión de lista de mascotas.
    public Mascota getMascotaRiac(String riac) {
        for (Mascota m : listaMascota) {
            if (riac.equals(m.getRiac())) return m;
        }
        return null;
    }

    private Mascota getMascotaPoliza(int poliza) {
        for (Mascota m : listaMascota) {
            if (poliza == m.getPoliza()) return m;
        }
        return null;
    }

    public List<Mascota> getListaMascota() {
        return listaMascota;
    }

    private List<Mascota> cargarMascotas(IAccesoUsuarios accesoUsuarios) throws IOException {
        return iPersistenciaMascota.cargar(accesoUsuarios);
    }
}